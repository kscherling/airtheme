{"version":3,"file":"index.js","sources":["../src/unit/types.js","../src/unit/schema.js","../src/unit/factoryFor.js","../src/unit/index.js","../src/attribute/types.js","../src/attribute/schema.js","../src/attribute/factoryFor.js","../src/attribute/index.js","../src/setting/schema.js","../src/setting/types.js","../src/setting/factoryFor.js","../src/setting/index.js","../src/base/types.js","../src/base/factoryFor.js","../src/base/index.js","../src/theme/types.js","../src/theme/factoryFor.js","../src/theme/index.js","../src/theme/schema.js","../src/base/schema.js","../src/utils/getReferencedAttribute.js","../src/unit/deserializers/factor.js","../src/utils/downcase.js","../src/unit/deserializers/px.js","../src/unit/deserializers/string.js","../src/unit/deserializers/reference.js","../src/unit/deserializers/hexa.js","../src/unit/deserializer.js","../src/attribute/deserialize.js"],"sourcesContent":["// @flow\nimport type {\n  UnitST,\n  UnitFactorT,\n  UnitHexT,\n  UnitHexaT,\n  UnitPxT,\n  UnitReferenceT,\n  UnitRemT,\n  UnitRgbT,\n  UnitRgbaT,\n  UnitStringT\n} from '../flow/UnitTypes'\n\n/**\n * Unit factor type\n */\n\nexport const Factor: UnitFactorT = {\n  __schemaname: 'Unit',\n  __typename: 'Factor',\n  name: '',\n  ordinal: 0,\n  value: ''\n}\n\n/**\n * Unit hex type\n */\n\nexport const Hex: UnitHexT = {\n  __schemaname: 'Unit',\n  __typename: 'Hex',\n  name: '',\n  ordinal: 0,\n  value: ''\n}\n\n/**\n * Unit hexa type\n */\n\nexport const Hexa: UnitHexaT = {\n  __schemaname: 'Unit',\n  __typename: 'Hexa',\n  name: '',\n  ordinal: 0,\n  value: ''\n}\n\n/**\n * Unit px type\n */\n\nexport const Px: UnitPxT = {\n  __schemaname: 'Unit',\n  __typename: 'Px',\n  name: '',\n  ordinal: 0,\n  value: ''\n}\n\n/**\n * Unit reference type\n */\n\nexport const Reference: UnitReferenceT = {\n  __schemaname: 'Unit',\n  __typename: 'Reference',\n  name: '',\n  ordinal: 0,\n  value: ''\n}\n\n/**\n * Unit rem type\n */\n\nexport const Rem: UnitRemT = {\n  __schemaname: 'Unit',\n  __typename: 'Rem',\n  name: '',\n  ordinal: 0,\n  value: ''\n}\n\n/**\n * Unit rgb type\n */\n\nexport const Rgb: UnitRgbT = {\n  __schemaname: 'Unit',\n  __typename: 'Rgb',\n  name: '',\n  ordinal: 0,\n  value: ''\n}\n\n/**\n * Unit rgba type\n */\n\nexport const Rgba: UnitRgbaT = {\n  __schemaname: 'Unit',\n  __typename: 'Rgba',\n  name: '',\n  ordinal: 0,\n  value: ''\n}\n\n/**\n * Unit string type\n */\n\nexport const Str: UnitStringT = {\n  __schemaname: 'Unit',\n  __typename: 'String',\n  name: '',\n  ordinal: 0,\n  value: ''\n}\n","// @flow\nimport type { UnitST } from '../flow/UnitTypes'\n\n/**\n * Unit schema type\n */\n\nconst Unit: UnitST = {\n  __schemaname: 'Unit',\n  __typename: '',\n  name: '',\n  ordinal: 0,\n  value: ''\n}\n\nexport default Unit\n","// @flow\nimport type {\n  UnitST,\n  UnitFactoryOptions,\n  UnitFactoryInstance\n} from '../flow/UnitTypes'\n\n/**\n * @name factoryForUnit\n * Unit factory for\n */\n\nconst factoryForUnit = (schema: UnitST) => (options: UnitFactoryOptions) =>\n  ({ ...schema, ...options }: UnitFactoryInstance)\n\nexport default factoryForUnit\n","import * as types from './types'\nimport Schema from './schema'\nimport factoryFor from './factoryFor'\n\nconst { Factor, Hex, Hexa, Px, Reference, Rem, Rgb, Rgba, Str } = types\n\nconst unit = {\n  factor: factoryFor(Factor, Schema),\n  hex: factoryFor(Hex, Schema),\n  hexa: factoryFor(Hexa, Schema),\n  px: factoryFor(Px, Schema),\n  reference: factoryFor(Reference, Schema),\n  rem: factoryFor(Rem, Schema),\n  rgb: factoryFor(Rgb, Schema),\n  rgba: factoryFor(Rgba, Schema),\n  string: factoryFor(Str, Schema)\n}\n\nexport default unit\n","// @flow\nimport unit from '../unit'\nimport type {\n  AttributeBaseFontSizeT,\n  AttributeBaseLineHeightT,\n  AttributeBaseSpacingT,\n  AttributeColorT,\n  AttributeFontFaceT,\n  AttributeFontFamilyT,\n  AttributeFontSizeT,\n  AttributeFontWeightT,\n  AttributeLineHeightT,\n  AttributeSpacingT,\n  AttributeSwatchT\n} from '../flow/AttributeTypes'\n\n/**\n * Base font size object\n */\n\nexport const BaseFontSize: AttributeBaseFontSizeT = {\n  __schemaname: 'Attribute',\n  __schemaname: 'Attribute',\n  __typename: 'BaseFontSize',\n  content: unit.px(),\n  reference: null,\n  unit: 'Px',\n  view: 'Px',\n  viewable: ['Px']\n}\n\n/**\n * Base line height object\n */\n\nexport const BaseLineHeight: AttributeBaseLineHeightT = {\n  __schemaname: 'Attribute',\n  __schemaname: 'Attribute',\n  __typename: 'BaseLineHeight',\n  content: unit.factor(),\n  reference: 'base.baseFontSize',\n  unit: 'Factor',\n  view: 'Factor',\n  viewable: ['Factor', 'Px']\n}\n\n/**\n * Base spacing object\n */\n\nexport const BaseSpacing: AttributeBaseSpacingT = {\n  __schemaname: 'Attribute',\n  __schemaname: 'Attribute',\n  __typename: 'BaseSpacing',\n  content: unit.px(),\n  reference: null,\n  unit: 'Px',\n  view: 'Px',\n  viewable: ['Px']\n}\n\n/**\n * Color object\n */\n\nexport const Color: AttributeColorT = {\n  __schemaname: 'Attribute',\n  __typename: 'Color',\n  content: [],\n  reference: 'swatch',\n  unit: 'Reference',\n  view: 'Reference',\n  viewable: ['Reference', 'Hex', 'Hexa', 'Rgb', 'Rgba']\n}\n\n/**\n * Font face object\n */\n\nexport const FontFace: AttributeFontFaceT = {\n  __schemaname: 'Attribute',\n  __typename: 'FontFace',\n  content: [],\n  reference: null,\n  unit: 'String',\n  view: 'String',\n  viewable: ['String']\n}\n\n/**\n * Font family object\n */\n\nexport const FontFamily: AttributeFontFamilyT = {\n  __schemaname: 'Attribute',\n  __typename: 'FontFamily',\n  content: [],\n  reference: 'fontFace',\n  unit: 'Reference',\n  view: 'Reference',\n  viewable: ['Reference']\n}\n\n/**\n * Font size object\n */\n\nexport const FontSize: AttributeFontSizeT = {\n  __schemaname: 'Attribute',\n  __typename: 'FontSize',\n  content: [],\n  reference: 'base.baseFontSize',\n  unit: 'Factor',\n  view: 'Factor',\n  viewable: ['Factor', 'Px', 'Rem']\n}\n\n/**\n * Font weight object\n */\n\nexport const FontWeight: AttributeFontWeightT = {\n  __schemaname: 'Attribute',\n  __typename: 'FontWeight',\n  content: [],\n  reference: null,\n  unit: 'String',\n  view: 'String',\n  viewable: ['String']\n}\n\n/**\n * Line height object\n */\n\nexport const LineHeight: AttributeLineHeightT = {\n  __schemaname: 'Attribute',\n  __typename: 'LineHeight',\n  content: [],\n  reference: 'base.baseFontSize',\n  unit: 'Factor',\n  view: 'Factor',\n  viewable: ['Factor', 'Px']\n}\n\n/**\n * Spacing object\n */\n\nexport const Spacing: AttributeSpacingT = {\n  __schemaname: 'Attribute',\n  __typename: 'Spacing',\n  content: [],\n  reference: 'base.baseSpacing',\n  unit: 'Factor',\n  view: 'Factor',\n  viewable: ['Factor', 'Px']\n}\n\n/**\n * Swatch object\n */\n\nexport const Swatch: AttributeSwatchT = {\n  __schemaname: 'Attribute',\n  __typename: 'Swatch',\n  content: [],\n  reference: null,\n  unit: 'Hexa',\n  view: 'Hexa',\n  viewable: ['Hex', 'Hexa', 'Rgb', 'Rgba']\n}\n","// @flow\nimport type { AttributeST } from '../flow/AttributeTypes'\n\n/**\n * Attribute schema object.\n */\n\nconst Attribute: AttributeST = {\n  __schemaname: 'Attribute',\n  __typename: '',\n  content: [],\n  reference: '',\n  unit: '',\n  view: '',\n  viewable: []\n}\n\nexport default Attribute\n","//@flow\nimport type {\n  AttributeST,\n  AttributeFactoryOptions,\n  AttributeFactoryInstance\n} from '../flow/AttributeTypes'\n\n/**\n * @name factoryForAttribute\n * Attribute factory for\n */\n\nconst factoryForAttribute = (schema: AttributeST) => (\n  options: AttributeFactoryOptions\n) => ({ ...schema, ...options }: AttributeFactoryInstance)\n\nexport default factoryForAttribute\n","import * as types from './types'\nimport Schema from './schema'\nimport factoryFor from './factoryFor'\n\nconst {\n  Color,\n  FontFamily,\n  FontSize,\n  FontFace,\n  FontWeight,\n  LineHeight,\n  Spacing,\n  Swatch,\n  BaseSpacing,\n  BaseLineHeight,\n  BaseFontSize\n} = types\n\nconst attribute = {\n  baseFontSize: factoryFor(BaseFontSize, Schema),\n  baseSpacing: factoryFor(BaseSpacing, Schema),\n  baseLineHeight: factoryFor(BaseLineHeight, Schema),\n  color: factoryFor(Color, Schema),\n  fontFamily: factoryFor(FontFamily, Schema),\n  fontSize: factoryFor(FontSize, Schema),\n  fontWeight: factoryFor(FontWeight, Schema),\n  lineHeight: factoryFor(LineHeight, Schema),\n  fontFace: factoryFor(FontFace, Schema),\n  fontFamily: factoryFor(FontFamily, Schema),\n  spacing: factoryFor(Spacing, Schema),\n  swatch: factoryFor(Swatch, Schema)\n}\n\nexport default attribute\n","// @flow\nimport attribute from '../attribute'\nimport type { SettingST } from '../flow/SettingTypes'\n\n/**\n * @description Setting schema object.\n */\n\nconst SettingSchema: SettingST = {\n  __schemaname: 'Setting',\n  __typename: 'Base',\n  color: attribute.color(),\n  fontFamily: attribute.fontFamily(),\n  fontSize: attribute.fontSize(),\n  fontWeight: attribute.fontWeight(),\n  spacing: attribute.spacing()\n}\n\nexport default SettingSchema\n","// @flow\nimport attribute from '../attribute'\nimport type { SettingBaseT } from '../flow/SettingTypes'\n\n/**\n * @description Setting base (default) type\n */\n\nexport const Base: SettingBaseT = {\n  __schemaname: 'Setting',\n  __typename: 'Base',\n  color: attribute.color(),\n  fontFamily: attribute.fontFamily(),\n  fontSize: attribute.fontSize(),\n  fontWeight: attribute.fontWeight(),\n  spacing: attribute.spacing()\n}\n","//@flow\nimport type {\n  SettingST,\n  SettingFactoryOptions,\n  SettingFactoryInstance\n} from '../flow/SettingTypes'\n\n/**\n * @name factoryForSetting\n * Setting factory for\n */\n\nconst factoryForSetting = (schema: SettingST) => (\n  options: SettingFactoryOptions\n) => ({ ...schema, ...options }: SettingFactoryInstance)\n\nexport default factoryForSetting\n","import Schema from './schema'\nimport * as types from './types'\nimport factoryFor from './factoryFor'\n\nconst { Base } = types\n\nconst setting = {\n  base: factoryFor(Base, Schema)\n}\n\nexport default setting\n","// @flow\nimport attribute from '../attribute'\nimport type { BaseBaseT } from '../flow/BaseTypes'\n\n/**\n * @description Base base (default) type\n */\n\nexport const Base: BaseBaseT = {\n  __schemaname: 'Base',\n  __typename: 'Base',\n  baseFontSize: attribute.baseFontSize(),\n  baseLineHeight: attribute.baseLineHeight(),\n  baseSpacing: attribute.baseSpacing()\n}\n","//@flow\nimport type {\n  BaseST,\n  BaseFactoryOptions,\n  BaseFactoryInstance\n} from '../flow/BaseTypes'\n\n/**\n * @name factoryForBase\n * Base factory for\n */\n\nconst factoryForBase = (schema: BaseST) => (options: BaseFactoryOptions) =>\n  ({ ...schema, ...options }: BaseFactoryInstance)\n\nexport default factoryForBase\n","import * as types from './types'\nimport factoryFor from './factoryFor'\n\nconst { Base } = types\n\nconst root = {\n  base: factoryFor(Base)\n}\n\nexport default root\n","// @flow\nimport { VERSION, uuid } from '@airtheme/core'\nimport attribute from '../attribute'\nimport setting from '../setting'\nimport base from '../base'\nimport type { ThemeBaseT } from '../flow/ThemeTypes'\n\n/**\n * @description Theme base (default) type\n */\n\nexport const Base: ThemeBaseT = {\n  __schemaname: 'Theme',\n  __typename: 'Base',\n  base: base.base(),\n  fontFace: attribute.fontFace(),\n  id: '',\n  name: '',\n  setting: setting.base(),\n  swatch: attribute.swatch(),\n  version: VERSION\n}\n","//@flow\nimport type {\n  ThemeST,\n  ThemeFactoryOptions,\n  ThemeFactoryInstance\n} from '../flow/ThemeTypes'\n\n/**\n * @name factoryForTheme\n * Theme factory for\n */\n\nconst factoryForTheme = (schema: ThemeST) => (options: ThemeFactoryOptions) =>\n  ({ ...schema, ...options }: ThemeFactoryInstance)\n\nexport default factoryForTheme\n","// @flow\nimport * as types from './types'\nimport factoryForTheme from './factoryFor'\n\nconst { Base } = types\n\nconst theme = {\n  base: factoryForTheme(Base)\n}\n\nexport default theme\n","// @flow\nimport type { ThemeST } from '../flow/ThemeTypes'\nimport { VERSION } from '@airtheme/core'\nimport attribute from '../attribute'\nimport setting from '../setting'\nimport base from '../base'\n\n/**\n *  @description Theme schema type\n */\n\n// Included Base typename for ease.  Technically we are mixing types and interfaces\n// Theme shouldn't necessarally be an interface and can be more of a type.\n\nconst Theme: ThemeST = {\n  __schemaname: 'Theme',\n  __typename: 'Base',\n  base: base.base(),\n  fontFace: attribute.fontFace(),\n  id: '',\n  name: '',\n  setting: setting.base(),\n  swatch: attribute.swatch(),\n  version: VERSION\n}\n\nexport default Theme\n","// @flow\nimport attribute from '../attribute'\nimport type { BaseST } from '../flow/BaseTypes'\n\n/**\n * @description Base schema object.\n */\n\nconst Base: BaseST = {\n  __schemaname: 'Base',\n  __typename: 'Base',\n  baseFontSize: attribute.baseFontSize(),\n  baseLineHeight: attribute.baseLineHeight(),\n  baseSpacing: attribute.baseSpacing()\n}\n\nexport default Base\n","import { dig } from 'fp'\n\nconst getReferencedAttribute = ({ reference }, theme) => dig(reference, theme)\n\nexport default getReferencedAttribute\n","import getReferencedAttribute from '../../utils/getReferencedAttribute'\n\nconst downcase = str => str && str.toLowerCase()\n\nconst deserializeFactor = (\n  { value: unitVal, name: unitName } = {},\n  attribute,\n  theme\n) => {\n  // TODO: Does not account for arrays of units (base only)\n  const {\n    content: { value: refValue, __typename } = {}\n  } = getReferencedAttribute(attribute, theme)\n\n  return { [unitName]: `${refValue * unitVal}${downcase(__typename)}` }\n}\n\nexport default deserializeFactor\n","const downcase = str => str && str.toLowerCase()\n\nexport default downcase\n","import downcase from '../../utils/downcase'\n\nconst deserializePx = (\n  { value: unitVal, name: unitName, __typename } = {},\n  _attribute,\n  _theme\n) => {\n  return { [unitName]: `${unitVal}${downcase(__typename)}` }\n}\n\nexport default deserializePx\n","const deserializeString = (\n  { value: unitVal, name: unitName } = {},\n  _attribute,\n  _theme\n) => {\n  return { [unitName]: `${unitVal}` }\n}\n\nexport default deserializeString\n","import getReferencedAttribute from '../../utils/getReferencedAttribute'\nimport deserializeAttribute from '../../attribute/deserialize'\nimport { dig } from 'fp'\n\nconst deserializeReference = (\n  { value: unitVal, name: unitName } = {},\n  attribute,\n  theme\n) => {\n  const referencedAttribute = getReferencedAttribute(attribute, theme)\n\n  if (!referencedAttribute) {\n    console.warn(\n      `Attempting to deserialize an unknown reference: ${attribute.reference}`\n    )\n    return\n  }\n\n  if (referencedAttribute.unit === 'reference') {\n    console.warn(\n      'Attempting to deserialize a circular reference. \\\n      An attribute reference cannot point to another reference'\n    )\n    return\n  }\n\n  const refUnitVal = dig(\n    unitVal,\n    deserializeAttribute(referencedAttribute, theme)\n  )\n\n  return { [unitName]: `${refUnitVal}` }\n}\n\nexport default deserializeReference\n","const tinycolor = require('tinycolor2')\n\nconst toCssColorString = hexa => {\n  const opaque = /^#\\S{6}ff$/i\n  const isOpaque = opaque.test(hexa)\n\n  return isOpaque\n    ? tinycolor(hexa).toHexString()\n    : tinycolor(hexa).toRgbString()\n}\n\nconst deserializeHexa = (\n  { value: unitValue, name: unitName } = {},\n  _attribute,\n  _theme\n) => {\n  return { [unitName]: `${toCssColorString(unitValue)}` }\n}\n\nexport default deserializeHexa\n","import * as deserializers from './deserializers'\n\nconst deserialize = (unit, attribute, theme) => {\n  if (!deserializers[unit.__typename]) {\n    console.warn(\n      `Attempting to deserialize an unknown unit type: ${unit.__typename}`\n    )\n    return\n  }\n\n  return deserializers[unit.__typename](unit, attribute, theme)\n}\n\nexport default deserialize\n","import deserializeUnit from '../unit/deserializer'\n/*\nAccepts an attribute __typename and theme __typename\nReturns __typename of deserialzied values\nmust pass attribute and theme __typename for reference\n\nfontSize: {\n  view: \"factor\",\n  viewable: [ \"factor\", \"px\", \"rem\" ],\n  reference: \"baseFontSize\",\n  __typename: \"fontSize\",\n  unit: \"factor\"\n  content: [\n    { name: \"xs\", ordinal: 1, __typename: \"factor\", value: \"0.8\" },\n    { name: \"sm\", ordinal: 2, __typename: \"factor\", value: \"0.9\" },\n    { name: \"md\", ordinal: 3, __typename: \"factor\", value: \"1\" },\n    { name: \"lg\", ordinal: 4, __typename: \"factor\", value: \"1.1\" },\n    { name: \"xl\", ordinal: 5, __typename: \"factor\", value: \"1.2\" },\n    { name: \"xxl\", ordinal: 6, __typename: \"factor\", value: \"1.3\" }\n  ],\n},\n\n{\n  xs: '0.8rem',\n  sm: '0.9rem',\n  md: '1rem',\n  ...\n}\n*/\n\nconst isEmpty = ({ content }) =>\n  Array.isArray(content) ? !Boolean(content.length) : !Boolean(content)\n\nconst validTypes = ({ content, unit } = {}) =>\n  Array.isArray(content)\n    ? content.length && unit === content[0].__typename\n    : content && unit === content.__typename\n\nconst deserialize = (attribute, theme) => {\n  console.log('attribute', attribute)\n  console.log('theme', theme)\n\n  if (isEmpty(attribute)) {\n    console.warn('Content is empty')\n    return\n  }\n\n  if (!validTypes(attribute)) {\n    console.warn('Attempting to deserialize a type mismatch')\n    return\n  }\n\n  if (Array.isArray(attribute.content)) {\n    return attribute.content.reduce(\n      (acc, unit) => ({\n        ...acc,\n        ...deserializeUnit(unit, attribute, theme)\n      }),\n      {}\n    )\n  }\n\n  return deserializeUnit(attribute.content, attribute, theme)\n}\n\nexport default deserialize\n"],"names":["Factor","__schemaname","__typename","name","ordinal","value","Hex","Hexa","Px","Reference","Rem","Rgb","Rgba","Str","Unit","factoryForUnit","schema","options","types","unit","factor","factoryFor","Schema","hex","hexa","px","reference","rem","rgb","rgba","string","BaseFontSize","BaseLineHeight","BaseSpacing","Color","content","view","viewable","FontFace","FontFamily","FontSize","FontWeight","LineHeight","Spacing","Swatch","Attribute","factoryForAttribute","attribute","baseFontSize","baseSpacing","baseLineHeight","color","fontFamily","fontSize","fontWeight","lineHeight","fontFace","SettingSchema","spacing","Base","factoryForSetting","setting","base","factoryForBase","root","id","swatch","version","VERSION","factoryForTheme","theme","Theme","getReferencedAttribute","dig","downcase","str","toLowerCase","deserializeFactor","unitVal","unitName","refValue","deserializePx","deserializeString","deserializeReference","referencedAttribute","console","warn","refUnitVal","deserializeAttribute","tinycolor","require","toCssColorString","opaque","isOpaque","test","toHexString","toRgbString","deserializeHexa","unitValue","deserialize","deserializers","isEmpty","Array","isArray","Boolean","length","validTypes","log","reduce","acc","deserializeUnit"],"mappings":"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"}